package org.diligentsnail.april;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.io.UncheckedIOException;
import java.lang.annotation.RetentionPolicy;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import static java.lang.annotation.RetentionPolicy.RUNTIME;
import static java.util.Collections.synchronizedList;

public class Thirtieth {
	// 1. –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã
	// 2. –í–æ–ø—Ä–æ—Å—ã üôã
	// 3. Serializable üßô
	//  –≠—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∞–∫–æ–π


	record Book(String title) implements Serializable {
	}

	public static class SerializableDemo {
		public static void main(String[] args) throws IOException, ClassNotFoundException {
			// Book -> byte[]

/*
			Book abc = new Book("abc");
			try (ObjectOutputStream outputStream
					// socket.getOutputStream()
						 = new ObjectOutputStream(new FileOutputStream("f.dat"))) {
				outputStream.writeObject(abc);
			}
*/
			try (ObjectInputStream inputStream
						 // socket.getInputStream()
						 = new ObjectInputStream(new FileInputStream("f.dat"))) {
				Book o = (Book) inputStream.readObject();
				System.out.println(o);
			}
		}
	}

	// 6. –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å üßµ

	// ArrayList, –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö?

	public static class MultithreadingCollections {
		public static void main(String[] args) {
			List<Object> objects = synchronizedList(new ArrayList<>());

			objects.add("abc");
			synchronized (objects) {
				for (Object object : objects) {
				}
			}

		}
	}

	// 10. –ú–Ω–æ–≥–æ–º–æ–¥—É–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ü¶â https://github.com/diligent-snail/maven-multimodule-project-demo
	// jdbc
	// 11. –í–æ–ø—Ä–æ—Å—ã üôãüôã
	// 12. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è üíö
	// 4. –ò—Å–∫–ª—é—á–µ–Ω–∏—è üìó

	// –ó–∞—á–µ–º?
	// 1. –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä —Ä—É–≥–∞–µ—Ç—Å—è(–Ω–∞—Å –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç): IOException, ClassNotFoundException, SQLException
	//      1. –ú—ã –∑–Ω–∞–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å
	public static void main0(String[] args) {
		// –ü—Ä–æ—á–∏—Ç–∞–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞
		try {
			String string = Files.readString(Path.of(""));
			System.out.println(string);
		} catch (IOException e) {
			System.out.println("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, " + e.getMessage());
			e.printStackTrace(System.out);
		}
	}

	public void init() {
		try {
			Files.readString(Path.of("file.config"));
			// –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
		} catch (IOException e) {
			// –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—è
		}
	}

	// –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É

	//      2. –ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å
	public String readFile(Path path) {
		try {
			return Files.readString(path);
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}

	// 2. –ú—ã —Å–∞–º–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è:
	//      1. –ú—ã –∑–Ω–∞–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å
	public int getPort(String string) {
		try {
			return Integer.parseInt(string);
		} catch (NumberFormatException e) {
			// –ª–æ–≥
			return 8080;
		}
	}
	//      2. –ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å -> catch (Exception e). –ù–µ –Ω–∞–¥–æ –ª–æ–≤–∏—Ç—å, –µ—Å–ª–∏ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ –¥–µ–ª–∞—Ç—å

	// 8. IO –∏ —Ç–µ—Å—Ç—ã ü§Ø


	// 7. import static. —Ç—É—Ç –≤—Å—ë –ª–µ–≥–∫–æ
	public static void main(String[] args) {
		RetentionPolicy runtime = RUNTIME;
		synchronizedList(new ArrayList<>());
	}
	// 5. Generic'–∏ üìï
	// –ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ? List<String>, List<Integer>
	// Type erasure
	// PECS: producer extends, consumer super
	///      ? extends T, ? super T

	public static class Erasure {
		public static void main(String[] args) {
			List<String> strings = new ArrayList<>();
			List list = strings;
			list.add(8L);

			String s = strings.get(0);
		}
	}

	// 9. –ö–∞–∫ –∫–æ–¥ –¥–µ–ª–∏—Ç—å ü•∂
}
